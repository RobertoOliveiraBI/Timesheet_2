# Regras do vibe coding 

1. Primeiro, pense no problema, leia a documenta√ß√£o e crie um plano, 
2. O plano deve ter uma lista de tarefas que voc√™ pode marcar como conclu√≠das, 
3. Antes de come√ßar a trabalhar, entre em contato comigo e eu verificarei o plano, 
4. Em seguida, comece a trabalhar nas tarefas, marcando-as como conclu√≠das conforme voc√™ avan√ßa, 
5. Por favor, a cada passo do caminho, apenas me d√™ uma explica√ß√£o detalhada das altera√ß√µes que voc√™ fez, 
6. Torne cada tarefa e altera√ß√£o de c√≥digo o mais simples poss√≠vel, queremos evitar altera√ß√µes massivas ou complexas, cada altera√ß√£o deve impactar o m√≠nimo poss√≠vel no c√≥digo, tudo se resume √† simplicidade, 
7. Aviso de seguran√ßa: verifique todo o c√≥digo que voc√™ acabou de escrever e certifique-se de que ele segue as pr√°ticas recomendadas de seguran√ßa, 
8. Certifique-se de que n√£o haja informa√ß√µes confidenciais no in√≠cio e vulnerabilidades que possam ser exploradas, 
9. Explique a funcionalidade e o c√≥digo que voc√™ acabou de criar em detalhes, explique o que voc√™ alterou e como funciona, aja como se fosse um engenheiro s√™nior me ensinando a programar

Contexto: o sistema j√° tem usu√°rios com pap√©is MASTER, ADMIN e GESTOR, campanhas e timesheets, e agora precisa de um m√≥dulo novo onde os gestores, admins e master, principalmente o gestor, possam lan√ßar custos vinculados √†s campanhas para controle financeiro e an√°lise de investimento, esse m√≥dulo deve conviver sem afetar outras partes do sistema, nenhuma outra √°rea pode ser alterada al√©m desta

L√≥gica: os gestores precisam registrar m√∫ltiplos custos por campanha por m√™s com assunto, descri√ß√£o, m√™s de refer√™ncia, valor e observa√ß√µes, para depois agregar, auditar e relacionar com performance da campanha e or√ßamento, esses lan√ßamentos devem ser edit√°veis, inativ√°veis, versionados na pr√°tica via status e ter valida√ß√£o forte para evitar dados sujos ou nulos

A√ß√£o: criar o m√≥dulo completo de lan√ßamento de custos de campanha incluindo banco de dados, backend (API/servi√ßos), controle de acesso, frontend (formul√°rio e listagem), persist√™ncia com autosave e bot√£o salvar com feedback, valida√ß√µes, tratamento de formatos num√©ricos e strings, e interface de gerenciamento para gestores poderem criar, editar, listar e inativar custos, sem tocar em nenhuma outra parte do sistema

Resultados: tabela persistente de custos de campanha funcionando, interface para gest√£o desses custos, acess√≠vel apenas para MASTER, ADMIN e GESTOR conforme regras de permiss√£o, com cria√ß√£o, edi√ß√£o, inativa√ß√£o, filtros por m√™s e campanha, feedback visual de salvamento, e c√≥digo claro, seguro, testado contra nulos e formatos errados

Entradas: nenhum dado adicional fora o que j√° existe no sistema, usar campanhas existentes, usu√°rios autenticados e suas roles, e os campos que ser√£o preenchidos pelo gestor: assunto, descri√ß√£o, m√™s, valor, observa√ß√µes

Formato: resposta inicial deve conter o plano de tarefas com checklists, depois que eu validar o plano voc√™ executa tarefa por tarefa, cada uma com explica√ß√£o t√©cnica detalhada antes e depois, incluindo trechos de c√≥digo alterado, o que foi adicionado, os motivos, e como testar

Informa√ß√µes Adicionais: seguir os padr√µes de nomenclatura do projeto (usar conven√ß√µes existentes para nomes de tabelas e campos), evitar mudan√ßas em outras √°reas, garantir que o m√≥dulo trate corretamente valores num√©ricos com separador decimal, campos obrigat√≥rios n√£o deixem dados incompletos, e que listagens n√£o quebrem por valores nulos ou tipos inesperados

Papel: atuar como engenheiro s√™nior de software orientando o desenvolvimento, explicando cada decis√£o, apontando riscos e como mitig√°-los, e deixando o c√≥digo did√°tico para que eu aprenda

### ‚úÖ Requisitos Funcionais:

1. criar, editar, listar, inativar (soft delete ou status) lan√ßamentos de custo para campanhas, permitindo m√∫ltiplos lan√ßamentos por campanha e por m√™s, com os campos: assunto, descri√ß√£o, m√™s de refer√™ncia (dropdown), valor, observa√ß√µes, autor do lan√ßamento e data
2. permitir filtro na listagem por campanha, m√™s e status, mostrar soma total por combina√ß√£o
3. autosave incremental enquanto o gestor preenche o formul√°rio e bot√£o "Salvar" expl√≠cito com feedback visual de progresso e erro
4. valida√ß√£o: assunto obrigat√≥rio, m√™s obrigat√≥rio, valor obrigat√≥rio e num√©rico positivo, descri√ß√£o opcional, observa√ß√µes opcionais, impedir duplica√ß√µes √≥bvias (ex: mesmo assunto no mesmo m√™s e campanha sem edi√ß√£o expl√≠cita)
5. controle de acesso: apenas usu√°rios com papel MASTER, ADMIN e GESTOR podem ver e usar o m√≥dulo, o gestor s√≥ lan√ßa para campanhas que est√° autorizado a gerenciar conforme regra atual do sistema, todas as checagens de permiss√£o devem reutilizar a l√≥gica existente de autoriza√ß√£o

### üóÉÔ∏è Banco de Dados:

1. √© necess√°rio criar uma nova tabela de custos de campanha (ex: campaign_costs ou conforme padr√£o), com colunas m√≠nimas: id, campaign_id (FK), user_id (quem lan√ßou), subject, description, reference_month (m√™s/ano), amount (decimal), notes, status (ativo/inativo), created_at, updated_at, inactivated_at se aplic√°vel
2. relacionar com a tabela de campanhas usando foreign key e com a tabela de usu√°rios para audit trail, garantir √≠ndices para filtros frequentes (campaign_id, reference_month, status)
3. seguir padr√µes do projeto para nomes, tipos e constraints, usar transa√ß√µes nos updates cr√≠ticos, usar valida√ß√£o no banco e no app para consist√™ncia

---

### üíæ Persist√™ncia:

* Dados devem ser salvos:

	* automaticamente ap√≥s edi√ß√£o com debounce curto para n√£o sobrecarregar, mostrando indicador sutil de "salvo automaticamente" quando conclu√≠do, 
	* manualmente via bot√£o "Salvar" com feedback visual claro de progresso e sucesso/erro, 
	* valida√ß√£o de campos obrigat√≥rios antes do envio final, bloqueando submit e destacando erros, 
	* tratar formatos num√©ricos e locais (ex: entrada de valor com v√≠rgula ou ponto) convertendo para decimal padr√£o do backend, 
	* garantir que os dados n√£o fiquem inconsistentes em caso de falha parcial (uso de rollback quando necess√°rio)

---

### üîê Controle de Acesso:

* explicar como ser√° o acesso: verificar sess√£o do usu√°rio, checar papel (MASTER, ADMIN, GESTOR), aplicar middleware existente de autoriza√ß√£o para garantir que apenas os permitidos acessem endpoints e frontend, para gestores validar tamb√©m se a campanha est√° dentro do escopo deles, retornar 403 quando n√£o autorizado, logar tentativas suspeitas sem expor dados sens√≠veis

---

### üé® Frontend:

1. adicionar no menu uma entrada clara para "Custos de Campanha" vis√≠vel para os pap√©is permitidos, criar tela de listagem com colunas: campanha, assunto, m√™s, valor, status, autor, a√ß√µes (editar, inativar), filtros acima (campanha, m√™s, status) e totalizador din√¢mico
2. criar formul√°rio de lan√ßamento/edi√ß√£o com os campos especificados, dropdown de m√™s/ano, m√°scara/normaliza√ß√£o de valor, suporte a salvar rascunho via autosave, bot√£o salvar com feedback, bot√£o cancelar revertendo rascunho
3. indicar erros inline, e permitir reativa√ß√£o de custos inativados via a√ß√£o espec√≠fica
4. garantir responsividade m√≠nima e usabilidade sem afetar outras partes da interface

---

‚ö†Ô∏è **Important:**  
**Do not make changes to any other part of the system** ‚Äî only work on esta se√ß√£o de custos de campanha, leave all other modules untouched, verificar e tratar todas as fun√ß√µes de cria√ß√£o, edi√ß√£o e inativa√ß√£o de registros na parte de tratamento de nulos e formato de campos num√©ricos ou strings para evitar erros, testar e garantir que as tabelas onde devem listar registros n√£o quebrem (como usu√°rios, categorias, clientes e demais cadastros), validar que todos os CRUDs necess√°rios existem e que as tabelas necess√°rias para este m√≥dulo est√£o presentes ou s√£o criadas corretamente

### Plano de tarefas inicial (aguardando sua aprova√ß√£o antes de executar):

- [ ] 1) analisar o schema atual e decidir nome padr√£o da nova tabela, criar migration da tabela de custos de campanha com rela√ß√µes e constraints
- [ ] 2) implementar valida√ß√µes de modelo/backend para garantir obrigatoriedade e formatos corretos
- [ ] 3) criar endpoints API m√≠nimos: listar com filtros, criar, editar, inativar/reactivar
- [ ] 4) adicionar controle de acesso em backend usando middleware existente e regras de campanha do gestor
- [ ] 5) criar frontend: listagem com filtros, totalizadores e a√ß√µes, sem quebrar outras telas
- [ ] 6) criar frontend: formul√°rio de cria√ß√£o/edi√ß√£o com autosave, valida√ß√µes inline, dropdown de m√™s, m√°scara de valor, bot√£o salvar com feedback
- [ ] 7) testes manuais e autom√°ticos: inserir, editar, inativar, reativar, filtros, checar erros de nulos e formatos, permiss√µes negadas, somas corretas
- [ ] 8) revis√£o de seguran√ßa, sanitiza√ß√£o de entrada, preven√ß√£o de injection, valida√ß√£o server-side refor√ßada
- [ ] 9) documenta√ß√£o m√≠nima do m√≥dulo (README interno ou coment√°rio explicando uso, permiss√µes, e como estender)

pe√ßa autoriza√ß√£o antes de cada item, depois execute e explique detalhadamente o que foi feito, inclua instru√ß√µes claras de como eu posso testar cada parte e quais comandos/URLs usar
