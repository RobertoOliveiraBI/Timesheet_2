Segue um prompt completo, pronto para colar no Replit (ou em qualquer agente coder), j√° no formato do seu modelo e com as ‚ÄúRegras do Vibe Coding‚Äù. Mantive tudo objetivo e acion√°vel para o seu projeto Timesheet\_2.

---

# Regras do vibe coding

1. Primeiro, pense no problema, leia a documenta√ß√£o e crie um plano.
2. O plano deve ter uma lista de tarefas que voc√™ pode marcar como conclu√≠das.
3. Antes de come√ßar a trabalhar, entre em contato comigo e eu verificarei o plano.
4. Em seguida, comece a trabalhar nas tarefas, marcando-as como conclu√≠das conforme voc√™ avan√ßa.
5. A cada passo, forne√ßa uma explica√ß√£o detalhada das altera√ß√µes que voc√™ fez.
6. Mantenha cada tarefa e altera√ß√£o o mais simples poss√≠vel. Evite mudan√ßas massivas.
7. Aviso de seguran√ßa: verifique todo o c√≥digo e siga boas pr√°ticas de seguran√ßa.
8. Certifique-se de n√£o vazar informa√ß√µes sens√≠veis nem criar vulnerabilidades.
9. Explique a funcionalidade e o c√≥digo criado em detalhes, como um engenheiro s√™nior ensinando.

---

## Contexto

Projeto **Timesheet\_2** com backend **TypeScript/Express**, **Postgres via Drizzle** e frontend React. Precisamos de um **m√≥dulo de backup em CSV** de todas as tabelas, disparado por:

1. endpoint administrativo manual;
2. primeiro login do dia (backup di√°rio).

## L√≥gica

Centralizar a l√≥gica de backup em `server/backup.ts`. A fun√ß√£o `backupAllTables()` deve:

* Descobrir todas as tabelas expostas em `@shared/schema` (Drizzle).
* Ler dados via `db` (Drizzle), converter para CSV com `json2csv`.
* Persistir cada CSV em `backups/<nome_tabela>-<YYYY-MM-DD>.csv` (criando a pasta se necess√°rio).

A fun√ß√£o `runDailyBackupIfNeeded()` deve:

* Carregar `last_backup_date` de `system_config`.
* Se `last_backup_date` < data de hoje, executar `backupAllTables()` e atualizar `last_backup_date`.

## A√ß√£o

Implementar:

* `server/backup.ts` com `backupAllTables()` e `runDailyBackupIfNeeded()`.
* Rota **protegida** `POST /api/admin/backup` em `server/routes.ts` chamando `backupAllTables()`.
* Chamada a `runDailyBackupIfNeeded()` no fluxo de login em `server/auth.ts`.
* Bot√£o ‚Äú**Gerar backup CSV**‚Äù na √°rea administrativa (`client/src/components/AdminSection.tsx` ou equivalente) que chama a rota e exibe toast de sucesso/erro.
* Tratamento robusto de erros e cria√ß√£o autom√°tica do diret√≥rio `backups/`.

## Resultados

* CSV de **todas** as tabelas, um arquivo por tabela, nomeado com a data.
* Endpoint administrativo funcional e protegido.
* Backup di√°rio autom√°tico no primeiro login.
* Bot√£o na UI admin para backup manual com feedback visual.

## Entradas

* Esquemas do Drizzle em `@shared/schema`.
* Conex√£o `db` existente.
* Tabela `system_config` contendo `last_backup_date` (criar se n√£o existir).

## Formato (o que voc√™ deve me retornar)

* **Plano de tarefas (checklist)**
* **Diffs** por arquivo modificado/criado
* **Blocos de c√≥digo completos** por arquivo
* **Comandos** (instala√ß√£o de deps, migra√ß√µes)
* **Notas de seguran√ßa** e **testes manuais/autom√°ticos**

## Informa√ß√µes Adicionais

* Depend√™ncias sugeridas: `json2csv`, `fs-extra`, `date-fns` (ou equivalente para formatar datas).
* Padronize tipos TypeScript, JSDoc/TSDoc e logs no servidor.

## Papel

Aja como **Desenvolvedor S√™nior Full-Stack** respons√°vel por backend (Express/Drizzle) e frontend (React/TS).

---

### ‚úÖ Requisitos Funcionais

1. Gerar **backup CSV** de todas as tabelas do Drizzle:

   * Manualmente via `POST /api/admin/backup` (apenas administradores).
   * Automaticamente no **primeiro login do dia** (comparar com `last_backup_date`).
2. Criar diret√≥rio `backups/` se ausente.
3. Nome de arquivo: `<tabela>-<YYYY-MM-DD>.csv`.
4. Logs claros no servidor sobre in√≠cio/fim/erros do backup.
5. Bot√£o ‚ÄúGerar backup CSV‚Äù na UI admin com toast de sucesso/erro.

---

### üóÉÔ∏è Banco de Dados

1. **Nova tabela** (se ausente): `system_config(id pk, last_backup_date date not null default (current_date))`.
2. **Relacionamentos**: n√£o requer relacionamentos; √© tabela de configura√ß√£o global (single row).
3. **Padr√µes do projeto**: usar Drizzle para schema/migra√ß√£o; nomear campos em `snake_case`.

---

### üíæ Persist√™ncia

* **Autosave**: n√£o se aplica diretamente; backups s√£o opera√ß√µes at√¥micas.
* **Salvar manual**: via bot√£o ‚ÄúGerar backup CSV‚Äù (UI) chamando o endpoint.
* **Valida√ß√µes**:

  * Checar exist√™ncia de `system_config` e linha de config; criar/seed se necess√°rio.
  * Validar permiss√µes (admin) no endpoint.
  * Garantir escrita at√¥mica dos arquivos e tratamento de erro por tabela (um erro n√£o impede as demais).

---

### üîê Controle de Acesso

* Proteger `POST /api/admin/backup` com middleware de autentica√ß√£o/autoriza√ß√£o j√° usado no projeto (ex.: `requireAuth`, `requireRole('admin')`).
* No login, a chamada `runDailyBackupIfNeeded()` ocorre **no servidor** ap√≥s autentica√ß√£o; n√£o expor nada sens√≠vel ao cliente.
* N√£o logar dados pessoais; apenas mensagens gen√©ricas de execu√ß√£o e contagem de tabelas/linhas.

---

### üé® Frontend

1. Em `client/src/components/AdminSection.tsx` (ou similar):

   * Adicionar bot√£o ‚ÄúGerar backup CSV‚Äù.
   * Chamar `POST /api/admin/backup` via fetch/axios.
   * Exibir **toast** de sucesso/erro; desabilitar bot√£o enquanto requisitando.
   * Mostrar √∫ltimo backup (data) lendo de um endpoint j√° existente ou criar `GET /api/admin/backup/status` (opcional).

---

## Plano (Checklist)

* [ ] Mapear tabelas a partir de `@shared/schema`.
* [ ] Implementar `server/backup.ts` com:

  * [ ] `backupAllTables()`
  * [ ] `runDailyBackupIfNeeded()`
  * [ ] Utilit√°rios de data, CSV e filesystem
* [ ] Criar/confirmar `system_config` e seed da linha √∫nica.
* [ ] Expor `POST /api/admin/backup` protegido em `server/routes.ts`.
* [ ] Integrar `runDailyBackupIfNeeded()` no `server/auth.ts` p√≥s-login.
* [ ] Adicionar bot√£o e chamadas na UI admin com toast.
* [ ] Testes manuais e (se poss√≠vel) unit√°rios.
* [ ] Documentar e revisar seguran√ßa.

---

## Implementa√ß√£o (o que gerar)

### Depend√™ncias

* Adicionar ao backend:

  * `json2csv`
  * `fs-extra`
  * `date-fns` (ou usar `Intl.DateTimeFormat`/`toISOString` + slice para `YYYY-MM-DD`)
* Tipos (se usar): `@types/fs-extra`

### Estrutura e Assinaturas

**`server/backup.ts`**

* `async function backupAllTables(): Promise<{ ok: true; files: string[] } | { ok: false; error: string }>`
* `async function runDailyBackupIfNeeded(): Promise<{ ran: boolean; date: string } | { ran: false; reason: string }>`
* Exportar ambas.

**Regras principais**

* Detectar tabelas a partir de `@shared/schema` (ex.: iterar chaves cujos valores sejam objetos de tabela Drizzle).
* Para cada tabela:

  * `const rows = await db.select().from(table).all()` (ajuste conforme Drizzle/driver).
  * Converter para CSV com `json2csv` (cuidar de campos nulos/arrays/JSON).
  * `fs.ensureDir('backups')` e `fs.writeFile(path, csv)`.
* Data: `YYYY-MM-DD` (timezone do servidor).

**`server/routes.ts`**

* `router.post('/api/admin/backup', requireAuth, requireRole('admin'), async (req, res) => { ... })`

**`server/auth.ts`**

* Ap√≥s autenticar:

  * `const result = await runDailyBackupIfNeeded();`
  * Logar `result` no servidor.

**Frontend (`AdminSection.tsx`)**

* Bot√£o ‚ÄúGerar backup CSV‚Äù
* `await fetch('/api/admin/backup', { method: 'POST', credentials: 'include' })`
* Toast de sucesso/erro
* Estado de carregamento

### Migra√ß√£o Drizzle (se `system_config` n√£o existir)

* Criar tabela `system_config` com campos:

  * `id` (pk, por exemplo ‚Äòglobal‚Äô)
  * `last_backup_date` (date not null)
* Seed inicial se n√£o houver linha: `id='global'`, `last_backup_date` = data de ontem (para for√ßar primeiro backup).

---

## Testes

**Manuais**

1. Remova/defina `last_backup_date` como ontem e fa√ßa login ‚Üí deve gerar backups e logs.
2. Fa√ßa login novamente no mesmo dia ‚Üí n√£o deve gerar backup.
3. Clique no bot√£o admin ‚Üí deve gerar backups independentemente da data.
4. Simule falha de permiss√£o (usu√°rio n√£o-admin) ‚Üí 403.
5. Apague diret√≥rio `backups/` e gere backup ‚Üí diret√≥rio recriado.
6. Apague/force erro em uma tabela ‚Üí outras tabelas ainda geram CSV e o erro √© logado.

**Automatizados (opcional)**

* Stub de `db` e `fs-extra` para validar que `backupAllTables()` escreve um arquivo por tabela e formata o nome corretamente.

---

## Seguran√ßa

* Endpoint protegido por autentica√ß√£o e role de admin.
* Sem dados sens√≠veis nos logs.
* Arquivos salvos em diret√≥rio interno do servidor, sem exposi√ß√£o p√∫blica.
* Rate-limit opcional no endpoint admin.
* Trate exce√ß√µes por tabela (n√£o parar o processo inteiro).

---

## Comandos

* Instala√ß√£o:

  * `npm i json2csv fs-extra date-fns`
  * `npm i -D @types/fs-extra` (se necess√°rio)
* Migra√ß√£o Drizzle: gerar e aplicar (siga o padr√£o do projeto).

---

## Crit√©rios de Aceite

* Arquivos CSV por tabela s√£o criados em `backups/` com nome `<tabela>-<YYYY-MM-DD>.csv`.
* `POST /api/admin/backup` retorna 200 em sucesso, 4xx/5xx em erro, e √© inacess√≠vel a n√£o-admins.
* `runDailyBackupIfNeeded()` executa apenas uma vez por dia no primeiro login v√°lido.
* UI admin exibe bot√£o funcional e feedback ao usu√°rio.
* C√≥digo tipado, comentado e com tratamento de erros.

---

### Auditoria r√°pida de CRUDs e tabelas (checagens solicitadas)

* Confirme que **CRUDs** essenciais (usu√°rios, categorias, clientes etc.) existem e listagens n√£o quebram com `null`/tipos (aplicar `?? ''`/mapeamento).
* Verifique se **todas as tabelas necess√°rias** existem no banco (Drizzle migrations em ordem).
* Normalize formata√ß√£o para campos num√©ricos/strings nas listagens e no CSV (converter n√∫meros/decimais corretamente; strings sem quebras inesperadas).

---

**Inicie retornando:**

1. O **plano** acima como checklist,
2. A lista de **arquivos a alterar/criar**,
3. Os **diffs** e o **c√≥digo completo** proposto para cada arquivo,
4. **Como testar** (passo a passo) e os **riscos**/mitiga√ß√µes.
